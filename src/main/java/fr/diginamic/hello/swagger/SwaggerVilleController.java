package fr.diginamic.hello.swagger;

import fr.diginamic.hello.dto.VilleDTO;
import fr.diginamic.hello.exceptions.ExceptionFonctionnelle;
import fr.diginamic.hello.repositories.VilleRepositoryHelper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Interface de documentation Swagger pour les op√©rations sur les villes.
 * Cette interface d√©finit toutes les annotations de documentation OpenAPI/Swagger
 * pour l'API de gestion des villes fran√ßaises.
 *
 * <p>Le contr√¥leur VilleController h√©rite de cette interface pour b√©n√©ficier
 * automatiquement de toute la documentation API sans polluer le code m√©tier.</p>
 *
 * <p><strong>Fonctionnalit√©s document√©es :</strong></p>
 * <ul>
 *   <li>CRUD complet des villes</li>
 *   <li>Recherches avanc√©es par crit√®res multiples</li>
 *   <li>Statistiques et analyses par d√©partement</li>
 *   <li>Import/export en lot</li>
 *   <li>Gestion des erreurs avec codes HTTP appropri√©s</li>
 * </ul>
 *
 * @author Matthieu - D√©veloppeur Full Stack
 * @version 1.0.0
 * @since 2025-08-26
 */
@Tag(name = "üèôÔ∏è Villes", description = """
    **API de gestion des villes fran√ßaises**
    
    Cette API permet de g√©rer l'ensemble des villes fran√ßaises avec leurs caract√©ristiques :
    - **Donn√©es** : nom, population, code postal, d√©partement
    - **Recherches** : par nom, population, d√©partement, crit√®res multiples
    - **Statistiques** : analyses d√©mographiques par d√©partement
    - **Gestion** : CRUD complet, import/export en lot
    
    **Codes d'erreur principaux :**
    - `400` : Donn√©es invalides ou malform√©es
    - `404` : Ressource non trouv√©e
    - `422` : Erreur de validation m√©tier
    - `500` : Erreur serveur interne
    """)
public interface SwaggerVilleController {

    // ==================== CRUD DE BASE ====================

    @Operation(
            summary = "üìã R√©cup√©rer toutes les villes avec pagination",
            description = """
            **R√©cup√®re la liste pagin√©e de toutes les villes fran√ßaises.**
            
            Cette endpoint supporte la pagination et le tri pour g√©rer efficacement 
            les grandes quantit√©s de donn√©es.
            
            **Param√®tres de tri disponibles :**
            - `id` : Tri par identifiant (d√©faut)
            - `nom` : Tri alphab√©tique par nom
            - `nbHabitants` : Tri par nombre d'habitants
            - `departement.code` : Tri par code d√©partement
            
            **Exemples d'usage :**
            - `GET /villes` ‚Üí Premi√®re page, 20 √©l√©ments, tri par ID
            - `GET /villes?page=2&size=50&sort=nom` ‚Üí Page 3, 50 √©l√©ments, tri par nom
            - `GET /villes?page=0&size=100&sort=nbHabitants` ‚Üí 100 plus petites villes
            """,
            tags = {"üèôÔ∏è Villes", "üìã CRUD"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Liste des villes r√©cup√©r√©e avec succ√®s",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = Page.class),
                            examples = @ExampleObject(
                                    name = "Exemple de r√©ponse pagin√©e",
                                    value = """
                        {
                          "content": [
                            {
                              "id": 1,
                              "nom": "Paris",
                              "nbHabitants": 2165423,
                              "departement": {
                                "code": "75",
                                "nom": "Paris"
                              }
                            }
                          ],
                          "pageable": {
                            "pageNumber": 0,
                            "pageSize": 20,
                            "sort": {
                              "sorted": true
                            }
                          },
                          "totalElements": 34827,
                          "totalPages": 1742,
                          "first": true,
                          "last": false
                        }
                        """
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Param√®tres de pagination invalides",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ExceptionFonctionnelle.class)
                    )
            )
    })
    Page<VilleDTO> getAllVilles(
            @Parameter(
                    description = "Num√©ro de la page (commence √† 0)",
                    example = "0",
                    schema = @Schema(minimum = "0", defaultValue = "0")
            ) @RequestParam(defaultValue = "0") int page,

            @Parameter(
                    description = "Taille de la page (nombre d'√©l√©ments)",
                    example = "20",
                    schema = @Schema(minimum = "1", maximum = "1000", defaultValue = "20")
            ) @RequestParam(defaultValue = "20") int size,

            @Parameter(
                    description = "Crit√®re de tri",
                    example = "nom",
                    schema = @Schema(
                            defaultValue = "id",
                            allowableValues = {"id", "nom", "nbHabitants", "departement.code"}
                    )
            ) @RequestParam(defaultValue = "id") String sort
    );

    @Operation(
            summary = "üîç R√©cup√©rer une ville par son identifiant",
            description = """
            **R√©cup√®re les d√©tails complets d'une ville sp√©cifique.**
            
            Cette endpoint retourne toutes les informations d'une ville :
            nom, population, d√©partement associ√©, etc.
            
            **Cas d'usage typiques :**
            - Affichage des d√©tails d'une ville
            - V√©rification de l'existence d'une ville
            - R√©cup√©ration avant mise √† jour
            """,
            tags = {"üèôÔ∏è Villes", "üìã CRUD"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Ville trouv√©e",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class),
                            examples = @ExampleObject(
                                    name = "Ville de Marseille",
                                    value = """
                        {
                          "id": 2,
                          "nom": "Marseille",
                          "nbHabitants": 868277,
                          "departement": {
                            "code": "13",
                            "nom": "Bouches-du-Rh√¥ne"
                          }
                        }
                        """
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå Ville non trouv√©e",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ExceptionFonctionnelle.class),
                            examples = @ExampleObject(
                                    name = "Ville inexistante",
                                    value = """
                        {
                          "status": 404,
                          "error": "Not Found",
                          "message": "Ville avec l'identifiant 99999 non trouv√©e",
                          "timestamp": "2025-08-26T10:30:00.000Z",
                          "path": "/villes/99999"
                        }
                        """
                            )
                    )
            )
    })
    VilleDTO getVilleById(
            @Parameter(
                    description = "Identifiant unique de la ville",
                    example = "1",
                    required = true,
                    schema = @Schema(type = "integer", format = "int64", minimum = "1")
            ) @PathVariable Long id
    );

    @Operation(
            summary = "‚ûï Cr√©er une nouvelle ville",
            description = """
            **Cr√©e une nouvelle ville dans le syst√®me.**
            
            La validation des donn√©es est automatique :
            - Nom obligatoire (2-100 caract√®res)
            - Population positive
            - Code d√©partement valide (existant dans le syst√®me)
            
            **R√®gles m√©tier :**
            - Le nom doit √™tre unique dans le d√©partement
            - Le d√©partement doit exister
            - La population ne peut pas √™tre n√©gative
            
            **Note :** L'identifiant est g√©n√©r√© automatiquement.
            """,
            tags = {"üèôÔ∏è Villes", "üìã CRUD"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "201",
                    description = "‚úÖ Ville cr√©√©e avec succ√®s",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class),
                            examples = @ExampleObject(
                                    name = "Nouvelle ville cr√©√©e",
                                    value = """
                        {
                          "id": 12345,
                          "nom": "Nouvelle-Ville",
                          "nbHabitants": 25000,
                          "departement": {
                            "code": "34",
                            "nom": "H√©rault"
                          }
                        }
                        """
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Donn√©es invalides",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ExceptionFonctionnelle.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "422",
                    description = "‚ùå Erreur de validation m√©tier (nom d√©j√† existant, d√©partement inexistant)",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ExceptionFonctionnelle.class)
                    )
            )
    })
    VilleDTO createVille(
            @Parameter(
                    description = "Donn√©es de la nouvelle ville √† cr√©er",
                    required = true,
                    schema = @Schema(implementation = VilleDTO.class)
            ) @Valid @RequestBody VilleDTO villeDTO
    );

    @Operation(
            summary = "‚úèÔ∏è Mettre √† jour une ville existante",
            description = """
            **Met √† jour les informations d'une ville existante.**
            
            Cette op√©ration remplace compl√®tement les donn√©es de la ville.
            Tous les champs doivent √™tre fournis, m√™me s'ils ne changent pas.
            
            **Validations appliqu√©es :**
            - M√™me validation que pour la cr√©ation
            - V√©rification de l'existence de la ville
            - V√©rification de l'existence du d√©partement
            
            **Important :** L'ID dans l'URL prime sur l'ID dans le body.
            """,
            tags = {"üèôÔ∏è Villes", "üìã CRUD"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Ville mise √† jour avec succ√®s",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Donn√©es invalides",
                    content = @Content()
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå Ville non trouv√©e",
                    content = @Content()
            )
    })
    VilleDTO updateVille(
            @Parameter(
                    description = "Identifiant de la ville √† modifier",
                    example = "123",
                    required = true
            ) @PathVariable Long id,

            @Parameter(
                    description = "Nouvelles donn√©es de la ville",
                    required = true
            ) @Valid @RequestBody VilleDTO villeDTO
    );

    @Operation(
            summary = "üóëÔ∏è Supprimer une ville",
            description = """
            **Supprime d√©finitivement une ville du syst√®me.**
            
            ‚ö†Ô∏è **Attention :** Cette op√©ration est irr√©versible !
            
            **V√©rifications pr√©alables :**
            - La ville doit exister
            - Aucune r√©f√©rence externe ne doit pointer vers cette ville
            
            **Code de retour :** 204 No Content en cas de succ√®s.
            """,
            tags = {"üèôÔ∏è Villes", "üìã CRUD"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "204",
                    description = "‚úÖ Ville supprim√©e avec succ√®s"
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå Ville non trouv√©e",
                    content = @Content()
            ),
            @ApiResponse(
                    responseCode = "409",
                    description = "‚ùå Impossible de supprimer (contraintes d'int√©grit√©)",
                    content = @Content()
            )
    })
    void deleteVille(
            @Parameter(
                    description = "Identifiant de la ville √† supprimer",
                    example = "123",
                    required = true
            ) @PathVariable Long id
    );

    // ==================== RECHERCHES SP√âCIALIS√âES ====================

    @Operation(
            summary = "üîç Rechercher une ville par nom exact",
            description = """
            **Trouve une ville par son nom exact (insensible √† la casse).**
            
            Cette recherche est exacte mais insensible √† la casse et aux accents.
            
            **Exemples :**
            - `nom=Paris` ‚Üí Trouve "Paris"
            - `nom=saint-√©tienne` ‚Üí Trouve "Saint-√âtienne"
            - `nom=MARSEILLE` ‚Üí Trouve "Marseille"
            """,
            tags = {"üèôÔ∏è Villes", "üîç Recherche"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Ville trouv√©e",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå Aucune ville trouv√©e avec ce nom",
                    content = @Content()
            )
    })
    VilleDTO findByNom(
            @Parameter(
                    description = "Nom exact de la ville recherch√©e",
                    example = "Paris",
                    required = true,
                    schema = @Schema(minLength = 1, maxLength = 100)
            ) @RequestParam String nom
    );

    @Operation(
            summary = "üîç Rechercher des villes par nom partiel",
            description = """
            **Trouve toutes les villes dont le nom contient la cha√Æne recherch√©e.**
            
            Recherche insensible √† la casse et aux accents.
            Les r√©sultats sont tri√©s par nom de ville.
            
            **Exemples d'usage :**
            - `nom=Saint` ‚Üí Toutes les villes contenant "Saint"
            - `nom=sur-mer` ‚Üí Toutes les villes "sur-mer"
            - `nom=ville` ‚Üí Toutes les villes avec "ville" dans le nom
            """,
            tags = {"üèôÔ∏è Villes", "üîç Recherche"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Liste des villes correspondantes",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Param√®tre de recherche invalide",
                    content = @Content()
            )
    })
    List<VilleDTO> findByNomContaining(
            @Parameter(
                    description = "Fragment du nom √† rechercher",
                    example = "Saint",
                    required = true,
                    schema = @Schema(minLength = 1, maxLength = 50)
            ) @RequestParam String nom
    );

    @Operation(
            summary = "üîç Rechercher des villes par pr√©fixe de nom",
            description = """
            **Trouve toutes les villes dont le nom commence par le pr√©fixe donn√©.**
            
            Utile pour l'auto-compl√©tion et les recherches par lettre.
            R√©sultats tri√©s alphab√©tiquement.
            
            **Cas d'usage :**
            - Syst√®me d'auto-compl√©tion
            - Navigation alphab√©tique
            - Statistiques par premi√®re lettre
            """,
            tags = {"üèôÔ∏è Villes", "üîç Recherche"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Villes commen√ßant par le pr√©fixe",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            )
    })
    List<VilleDTO> findByNomStartingWith(
            @Parameter(
                    description = "Pr√©fixe du nom de ville",
                    example = "Mont",
                    required = true,
                    schema = @Schema(minLength = 1, maxLength = 20)
            ) @RequestParam String prefix
    );

    // ==================== RECHERCHES PAR POPULATION ====================

    @Operation(
            summary = "üìä Villes avec population sup√©rieure √† un seuil",
            description = """
            **R√©cup√®re toutes les villes avec une population sup√©rieure au minimum sp√©cifi√©.**
            
            Les r√©sultats sont tri√©s par population d√©croissante.
            Utile pour analyser les grandes agglom√©rations.
            
            **Applications :**
            - √âtudes d√©mographiques
            - Seuils de services publics
            - Analyses urbaines
            """,
            tags = {"üèôÔ∏è Villes", "üìä Population"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Liste des villes avec population sup√©rieure au seuil",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Valeur de population invalide",
                    content = @Content()
            )
    })
    List<VilleDTO> findByPopulationGreaterThan(
            @Parameter(
                    description = "Population minimum (exclusive)",
                    example = "100000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer min
    );

    @Operation(
            summary = "üìä Villes avec population dans une plage donn√©e",
            description = """
            **R√©cup√®re les villes avec une population comprise entre deux valeurs.**
            
            Bornes inclusives : min ‚â§ population ‚â§ max
            R√©sultats tri√©s par population d√©croissante.
            
            **Exemples d'usage :**
            - Villes moyennes : 10000-50000 habitants
            - Grandes villes : 100000-500000 habitants
            - M√©tropoles : > 500000 habitants
            """,
            tags = {"üèôÔ∏è Villes", "üìä Population"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Villes dans la plage de population",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Plage de population invalide (min > max)",
                    content = @Content()
            )
    })
    List<VilleDTO> findByPopulationBetween(
            @Parameter(
                    description = "Population minimum (inclusive)",
                    example = "50000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer min,

            @Parameter(
                    description = "Population maximum (inclusive)",
                    example = "200000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer max
    );

    // ==================== RECHERCHES PAR D√âPARTEMENT ====================

    @Operation(
            summary = "üèõÔ∏è Villes d'un d√©partement avec crit√®res de population",
            description = """
            **R√©cup√®re les villes d'un d√©partement, optionnellement filtr√©es par population minimum.**
            
            Si aucun minimum n'est sp√©cifi√©, retourne toutes les villes du d√©partement.
            R√©sultats tri√©s par population d√©croissante.
            
            **Utilisation :**
            - Toutes les villes : `/villes/departement/34`
            - Avec minimum : `/villes/departement/34?min=5000`
            """,
            tags = {"üèôÔ∏è Villes", "üèõÔ∏è D√©partement"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Villes du d√©partement",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå D√©partement non trouv√©",
                    content = @Content()
            )
    })
    List<VilleDTO> findByDepartementAndMinPopulation(
            @Parameter(
                    description = "Code du d√©partement",
                    example = "34",
                    required = true,
                    schema = @Schema(
                            type = "string",
                            pattern = "^[0-9]{1,3}[AB]?$",
                            examples = {"34", "75", "2A", "974"}
                    )
            ) @PathVariable String code,

            @Parameter(
                    description = "Population minimum (optionnel)",
                    example = "10000",
                    required = false,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam(required = false) Integer min
    );

    @Operation(
            summary = "üèõÔ∏è Villes d'un d√©partement dans une plage de population",
            description = """
            **R√©cup√®re les villes d'un d√©partement avec population dans une plage sp√©cifique.**
            
            Combine filtrage g√©ographique et d√©mographique.
            Bornes inclusives : min ‚â§ population ‚â§ max
            
            **Applications :**
            - Analyse des villes moyennes d'une r√©gion
            - Identification des centres urbains secondaires
            - √âtudes de r√©partition d√©mographique
            """,
            tags = {"üèôÔ∏è Villes", "üèõÔ∏è D√©partement", "üìä Population"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Villes du d√©partement dans la plage",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Param√®tres invalides",
                    content = @Content()
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå D√©partement non trouv√©",
                    content = @Content()
            )
    })
    List<VilleDTO> findByDepartementAndPopulationRange(
            @Parameter(
                    description = "Code du d√©partement",
                    example = "13",
                    required = true
            ) @PathVariable String code,

            @Parameter(
                    description = "Population minimum (inclusive)",
                    example = "20000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer min,

            @Parameter(
                    description = "Population maximum (inclusive)",
                    example = "100000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer max
    );

    @Operation(
            summary = "üèÜ Top N des villes les plus peupl√©es d'un d√©partement",
            description = """
            **R√©cup√®re les N villes les plus peupl√©es d'un d√©partement donn√©.**
            
            Classement par population d√©croissante.
            Parfait pour identifier les centres urbains principaux.
            
            **Cas d'usage :**
            - Identification des p√¥les urbains
            - Analyses de hi√©rarchie urbaine
            - Planification territoriale
            """,
            tags = {"üèôÔ∏è Villes", "üèõÔ∏è D√©partement", "üèÜ Top"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Top N des villes du d√©partement",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)),
                            examples = @ExampleObject(
                                    name = "Top 3 H√©rault",
                                    value = """
                        [
                          {
                            "id": 15,
                            "nom": "Montpellier",
                            "nbHabitants": 295542,
                            "departement": {"code": "34", "nom": "H√©rault"}
                          },
                          {
                            "id": 127,
                            "nom": "B√©ziers", 
                            "nbHabitants": 77177,
                            "departement": {"code": "34", "nom": "H√©rault"}
                          },
                          {
                            "id": 891,
                            "nom": "S√®te",
                            "nbHabitants": 44270,
                            "departement": {"code": "34", "nom": "H√©rault"}
                          }
                        ]
                        """
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå D√©partement non trouv√©",
                    content = @Content()
            )
    })
    List<VilleDTO> findTopNVillesByDepartement(
            @Parameter(
                    description = "Code du d√©partement",
                    example = "34",
                    required = true
            ) @PathVariable String code,

            @Parameter(
                    description = "Nombre de villes √† retourner",
                    example = "10",
                    schema = @Schema(type = "integer", minimum = "1", maximum = "100", defaultValue = "10")
            ) @RequestParam(defaultValue = "10") int n
    );

    // ==================== STATISTIQUES ====================

    @Operation(
            summary = "üìà Nombre total de villes",
            description = """
            **Retourne le nombre total de villes enregistr√©es dans le syst√®me.**
            
            Utile pour les tableaux de bord et les statistiques g√©n√©rales.
            """,
            tags = {"üèôÔ∏è Villes", "üìà Statistiques"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Nombre total de villes",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(type = "integer", format = "int64", example = "34827")
                    )
            )
    })
    long getTotalCount();

    @Operation(
            summary = "üìä Statistiques d√©taill√©es d'un d√©partement",
            description = """
            **R√©cup√®re les statistiques compl√®tes d'un d√©partement.**
            
            **Informations retourn√©es :**
            - Nombre total de villes
            - Population totale
            - Population moyenne
            - Ville la plus/moins peupl√©e
            - R√©partition par taille de ville
            
            **Applications :** Tableaux de bord, analyses territoriales, √©tudes d√©mographiques.
            """,
            tags = {"üèôÔ∏è Villes", "üèõÔ∏è D√©partement", "üìä Statistiques"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Statistiques du d√©partement",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleRepositoryHelper.DepartementStats.class),
                            examples = @ExampleObject(
                                    name = "Stats H√©rault",
                                    value = """
                        {
                          "codeDepartement": "34",
                          "nomDepartement": "H√©rault",
                          "nombreVilles": 342,
                          "populationTotale": 1192605,
                          "populationMoyenne": 3487,
                          "villeLaPluspeuplee": "Montpellier",
                          "populationMax": 295542,
                          "villeLaMoinspeuplee": "Celles",
                          "populationMin": 26
                        }
                        """
                            )
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå D√©partement non trouv√©",
                    content = @Content()
            )
    })
    VilleRepositoryHelper.DepartementStats getDepartementStats(
            @Parameter(
                    description = "Code du d√©partement",
                    example = "34",
                    required = true
            ) @PathVariable String code
    );

    @Operation(
            summary = "üèÜ Ville la plus peupl√©e d'un d√©partement",
            description = """
            **Identifie la ville ayant la plus grande population dans un d√©partement donn√©.**
            
            Retourne les d√©tails complets de la ville championne.
            En cas d'√©galit√©, retourne la premi√®re trouv√©e par ordre alphab√©tique.
            """,
            tags = {"üèôÔ∏è Villes", "üèõÔ∏è D√©partement", "üèÜ Records"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Ville la plus peupl√©e trouv√©e",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå D√©partement non trouv√© ou sans villes",
                    content = @Content()
            )
    })
    VilleDTO getMostPopulatedVilleInDepartement(
            @Parameter(
                    description = "Code du d√©partement",
                    example = "75",
                    required = true
            ) @PathVariable String code
    );

    // ==================== GESTION AVANC√âE ====================

    @Operation(
            summary = "üîÑ Mettre √† jour uniquement la population d'une ville",
            description = """
            **Met √† jour seulement le nombre d'habitants d'une ville.**
            
            Op√©ration optimis√©e pour les mises √† jour fr√©quentes de population
            (recensements, estimations, corrections).
            
            **Avantages :**
            - Plus rapide qu'une mise √† jour compl√®te
            - Pas de risque de modifier d'autres champs
            - Historique des changements possible
            """,
            tags = {"üèôÔ∏è Villes", "‚úèÔ∏è Mise √† jour"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ Population mise √† jour",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Nouvelle population invalide",
                    content = @Content()
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå Ville non trouv√©e",
                    content = @Content()
            )
    })
    VilleDTO updatePopulation(
            @Parameter(
                    description = "Identifiant de la ville",
                    example = "123",
                    required = true
            ) @PathVariable Long id,

            @Parameter(
                    description = "Nouveau nombre d'habitants",
                    example = "150000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0", maximum = "20000000")
            ) @RequestParam Integer nouveauNb
    );

    @Operation(
            summary = "‚ö° Cr√©ation rapide d'une ville",
            description = """
            **Cr√©e rapidement une ville avec les param√®tres essentiels.**
            
            Alternative √† la cr√©ation compl√®te par JSON, utilise des param√®tres URL simples.
            Parfait pour les formulaires web ou les imports automatis√©s.
            
            **Validation :**
            - Nom unique dans le d√©partement
            - D√©partement existant
            - Population >= 0
            """,
            tags = {"üèôÔ∏è Villes", "‚ö° Cr√©ation rapide"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "201",
                    description = "‚úÖ Ville cr√©√©e rapidement",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = VilleDTO.class)
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Param√®tres invalides",
                    content = @Content()
            ),
            @ApiResponse(
                    responseCode = "422",
                    description = "‚ùå Ville d√©j√† existante ou d√©partement inexistant",
                    content = @Content()
            )
    })
    VilleDTO createVilleRapide(
            @Parameter(
                    description = "Nom de la ville",
                    example = "Nouvelle-Cit√©",
                    required = true,
                    schema = @Schema(minLength = 2, maxLength = 100)
            ) @RequestParam String nom,

            @Parameter(
                    description = "Nombre d'habitants",
                    example = "25000",
                    required = true,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam Integer nbHabitants,

            @Parameter(
                    description = "Code du d√©partement",
                    example = "34",
                    required = true
            ) @RequestParam String codeDepartement
    );


    // ==================== RECHERCHE MULTI-CRIT√àRES ====================

    @Operation(
            summary = "üîç Recherche avanc√©e multi-crit√®res",
            description = """
            **Recherche flexible combinant plusieurs crit√®res optionnels.**
            
            **Crit√®res disponibles :**
            - `nom` : Nom de ville (recherche partielle)
            - `minPop` : Population minimum
            - `maxPop` : Population maximum
            - `dept` : Code d√©partement
            
            **Logique :** Les crit√®res sont combin√©s avec ET logique.
            Si aucun crit√®re n'est fourni, retourne toutes les villes.
            
            **Exemples :**
            - `?nom=Saint&dept=34` ‚Üí Villes avec "Saint" dans l'H√©rault
            - `?minPop=50000&maxPop=200000` ‚Üí Villes moyennes de France
            - `?dept=75&minPop=100000` ‚Üí Grandes villes de Paris
            """,
            tags = {"üèôÔ∏è Villes", "üîç Recherche avanc√©e"}
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ R√©sultats de recherche (peut √™tre vide)",
                    content = @Content(
                            mediaType = "application/json",
                            array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class))
                    )
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå Crit√®res de recherche invalides",
                    content = @Content()
            )
    })
    List<VilleDTO> rechercheAvancee(
            @Parameter(
                    description = "Fragment du nom de ville (optionnel)",
                    example = "Mont",
                    required = false,
                    schema = @Schema(minLength = 1, maxLength = 50)
            ) @RequestParam(required = false) String nom,

            @Parameter(
                    description = "Population minimum (optionnel)",
                    example = "10000",
                    required = false,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam(required = false) Integer minPop,

            @Parameter(
                    description = "Population maximum (optionnel)",
                    example = "100000",
                    required = false,
                    schema = @Schema(type = "integer", minimum = "0")
            ) @RequestParam(required = false) Integer maxPop,

            @Parameter(
                    description = "Code d√©partement (optionnel)",
                    example = "34",
                    required = false,
                    schema = @Schema(type = "string", pattern = "^[0-9]{1,3}[AB]?$")
            ) @RequestParam(required = false) String dept
    );
}