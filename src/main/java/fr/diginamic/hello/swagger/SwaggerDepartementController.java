package fr.diginamic.hello.swagger;

import fr.diginamic.hello.dto.DepartementDTO;
import fr.diginamic.hello.dto.VilleDTO;
import fr.diginamic.hello.exceptions.ExceptionFonctionnelle;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * Interface de documentation Swagger pour les op√©rations sur les d√©partements fran√ßais.
 * Cette interface d√©finit toutes les annotations de documentation OpenAPI/Swagger
 * pour l'API de gestion des d√©partements fran√ßais.
 *
 * <p>Le contr√¥leur DepartementController h√©rite de cette interface pour b√©n√©ficier
 * automatiquement de toute la documentation API sans polluer le code m√©tier.</p>
 *
 * <p><strong>Fonctionnalit√©s document√©es :</strong></p>
 * <ul>
 *   <li>CRUD complet des d√©partements</li>
 *   <li>Recherches par code, nom, type g√©ographique</li>
 *   <li>Statistiques d√©mographiques et territoriales</li>
 *   <li>Gestion des relations avec les villes</li>
 *   <li>Classifications par zones g√©ographiques</li>
 * </ul>
 *
 * @author Matthieu - D√©veloppeur Full Stack
 * @version 1.0.0
 * @since 2025-08-26
 */
@Tag(name = "üèõÔ∏è D√©partements", description = """
    **API de gestion des d√©partements fran√ßais**
    
    Cette API permet de g√©rer l'ensemble des d√©partements fran√ßais avec leurs sp√©cificit√©s :
    - **Donn√©es** : code, nom, classification g√©ographique
    - **Recherches** : par code, nom, type (m√©tropolitain, outre-mer, Corse)
    - **Relations** : gestion des villes associ√©es
    - **Statistiques** : analyses d√©mographiques et territoriales
    
    **Classification des d√©partements :**
    - **M√©tropolitains** : 01-95 (sauf 20, 2A, 2B)
    - **Outre-mer** : 971, 972, 973, 974, 975, 976
    - **Corse** : 2A (Corse-du-Sud), 2B (Haute-Corse)
    - **Collectivit√©s** : codes sp√©ciaux (Saint-Pierre, Mayotte, etc.)
    
    **Codes d'erreur :**
    - `400` : Param√®tres invalides
    - `404` : D√©partement non trouv√©
    - `422` : Erreur m√©tier (code d√©j√† existant)
    """)
public interface SwaggerDepartementController {

    // ==================== CRUD DE BASE ====================

    @Operation(summary = "üìã R√©cup√©rer tous les d√©partements avec pagination", description = """
        **R√©cup√®re la liste pagin√©e de tous les d√©partements fran√ßais.**
        
        Support de la pagination et du tri pour une navigation efficace.
        
        **Options de tri disponibles :**
        - `nom` : Tri alphab√©tique par nom (d√©faut)
        - `code` : Tri par code d√©partement
        - `population` : Tri par population totale
        - `nombreVilles` : Tri par nombre de villes
        
        **Exemples d'usage :**
        - `GET /departements` ‚Üí Premi√®re page, tri par nom
        - `GET /departements?page=1&size=30&sort=population` ‚Üí Tri par population
        - `GET /departements?sort=code` ‚Üí Ordre des codes d√©partement
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Liste des d√©partements r√©cup√©r√©e",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = Page.class),
                            examples = @ExampleObject(name = "Exemple pagin√©", value = """
                    {
                      "content": [
                        {"id": 1, "code": "01", "nom": "Ain"},
                        {"id": 2, "code": "02", "nom": "Aisne"}
                      ],
                      "pageable": {"pageNumber": 0, "pageSize": 20, "sort": {"sorted": true}},
                      "totalElements": 101, "totalPages": 6
                    }
                    """))),
            @ApiResponse(responseCode = "400", description = "‚ùå Param√®tres de pagination invalides", content = @Content())
    })
    Page<DepartementDTO> getAllDepartements(
            @Parameter(description = "Num√©ro de la page (commence √† 0)", example = "0", schema = @Schema(minimum = "0", defaultValue = "0")) @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "Taille de la page", example = "20", schema = @Schema(minimum = "1", maximum = "100", defaultValue = "20")) @RequestParam(defaultValue = "20") int size,
            @Parameter(description = "Crit√®re de tri", example = "nom", schema = @Schema(defaultValue = "nom", allowableValues = {"nom", "code", "population", "nombreVilles"})) @RequestParam(defaultValue = "nom") String sort
    );

    @Operation(summary = "üîç R√©cup√©rer un d√©partement par son identifiant", description = """
        **R√©cup√®re les d√©tails complets d'un d√©partement par son ID technique.**
        
        Retourne toutes les informations du d√©partement : code, nom officiel, statistiques associ√©es si disponibles.
        
        **Usage recommand√© :** Pr√©f√©rer la recherche par code d√©partement qui est plus stable et intuitive.
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partement trouv√©",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class),
                            examples = @ExampleObject(name = "D√©partement H√©rault", value = """
                    {"id": 34, "code": "34", "nom": "H√©rault"}
                    """))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionFonctionnelle.class)))
    })
    DepartementDTO getDepartementById(
            @Parameter(description = "Identifiant technique du d√©partement", example = "34", required = true, schema = @Schema(type = "integer", format = "int64", minimum = "1")) @PathVariable Long id
    );

    @Operation(summary = "üîç R√©cup√©rer un d√©partement par son code officiel", description = """
        **R√©cup√®re un d√©partement par son code officiel (m√©thode recommand√©e).**
        
        Les codes d√©partementaux sont stables et correspondent aux usages administratifs :
        - Codes m√©tropolitains : 01 √† 95 (sauf 20)
        - Codes Corse : 2A, 2B  
        - Codes outre-mer : 971, 972, 973, 974, 975, 976
        
        **Avantage :** Plus intuitif que l'ID technique, stable dans le temps.
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partement trouv√© par code",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class),
                            examples = @ExampleObject(name = "Paris par code", value = """
                    {"id": 75, "code": "75", "nom": "Paris"}
                    """))),
            @ApiResponse(responseCode = "404", description = "‚ùå Code d√©partement non trouv√©", content = @Content())
    })
    DepartementDTO getDepartementByCode(
            @Parameter(description = "Code officiel du d√©partement", example = "34", required = true, schema = @Schema(type = "string", pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String code
    );

    @Operation(summary = "‚ûï Cr√©er un nouveau d√©partement", description = """
        **Cr√©e un nouveau d√©partement dans le syst√®me.**
        
        ‚ö†Ô∏è **Usage limit√© :** Cette fonction est principalement destin√©e √† l'administration du syst√®me. 
        Les d√©partements fran√ßais sont normalement pr√©d√©finis et stables.
        
        **Validations :**
        - Code unique et valide
        - Nom non vide si fourni
        - Respect du format des codes d√©partementaux
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "‚úÖ D√©partement cr√©√© avec succ√®s", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class))),
            @ApiResponse(responseCode = "400", description = "‚ùå Donn√©es invalides", content = @Content()),
            @ApiResponse(responseCode = "422", description = "‚ùå Code d√©partement d√©j√† existant", content = @Content())
    })
    DepartementDTO createDepartement(
            @Parameter(description = "Donn√©es du nouveau d√©partement", required = true, schema = @Schema(implementation = DepartementDTO.class)) @Valid @RequestBody DepartementDTO departementDTO
    );

    @Operation(summary = "‚úèÔ∏è Mettre √† jour un d√©partement existant", description = """
        **Met √† jour les informations d'un d√©partement existant.**
        
        ‚ö†Ô∏è **Attention :** La modification du code d√©partement peut avoir des impacts sur l'int√©grit√© r√©f√©rentielle avec les villes associ√©es.
        
        **Champs modifiables :**
        - Nom du d√©partement
        - Code (avec pr√©caution)
        
        **L'ID dans l'URL prime sur l'ID dans le body.**
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partement mis √† jour", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class))),
            @ApiResponse(responseCode = "400", description = "‚ùå Donn√©es invalides", content = @Content()),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content()),
            @ApiResponse(responseCode = "422", description = "‚ùå Nouveau code d√©j√† existant", content = @Content())
    })
    DepartementDTO updateDepartement(
            @Parameter(description = "Identifiant du d√©partement √† modifier", example = "34", required = true) @PathVariable Long id,
            @Parameter(description = "Nouvelles donn√©es du d√©partement", required = true) @Valid @RequestBody DepartementDTO departementDTO
    );

    @Operation(summary = "üóëÔ∏è Supprimer un d√©partement", description = """
        **Supprime d√©finitivement un d√©partement du syst√®me.**
        
        ‚ö†Ô∏è **DANGER :** Cette op√©ration est irr√©versible et peut affecter l'int√©grit√© des donn√©es si des villes sont associ√©es au d√©partement.
        
        **V√©rifications pr√©alables recommand√©es :**
        - Aucune ville n'est associ√©e au d√©partement
        - Aucune r√©f√©rence externe
        
        **Usage :** Principalement pour la maintenance administrative.
        """, tags = {"üèõÔ∏è D√©partements", "üìã CRUD"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "‚úÖ D√©partement supprim√©"),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content()),
            @ApiResponse(responseCode = "409", description = "‚ùå Impossible de supprimer (contraintes d'int√©grit√©)", content = @Content())
    })
    void deleteDepartement(
            @Parameter(description = "Identifiant du d√©partement √† supprimer", example = "34", required = true) @PathVariable Long id
    );

    // ==================== RECHERCHES SP√âCIALIS√âES ====================

    @Operation(summary = "üîç Rechercher un d√©partement par nom exact", description = """
        **Trouve un d√©partement par son nom officiel exact.**
        
        Recherche insensible √† la casse et aux accents.
        
        **Exemples valides :**
        - `nom=H√©rault` ‚Üí Trouve "H√©rault"
        - `nom=bouches-du-rh√¥ne` ‚Üí Trouve "Bouches-du-Rh√¥ne"
        - `nom=PARIS` ‚Üí Trouve "Paris"
        """, tags = {"üèõÔ∏è D√©partements", "üîç Recherche"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partement trouv√©", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√© avec ce nom", content = @Content())
    })
    DepartementDTO findByNom(
            @Parameter(description = "Nom exact du d√©partement", example = "H√©rault", required = true, schema = @Schema(minLength = 2, maxLength = 50)) @RequestParam String nom
    );

    @Operation(summary = "üîç Recherche globale par nom ou code", description = """
        **Recherche flexible par nom ou code de d√©partement.**
        
        Effectue une recherche partielle insensible √† la casse sur :
        - Le nom du d√©partement
        - Le code du d√©partement
        
        **Exemples d'usage :**
        - `q=h√©rault` ‚Üí Trouve "H√©rault" par nom
        - `q=34` ‚Üí Trouve d√©partement code "34"
        - `q=rh√¥` ‚Üí Trouve "Bouches-du-Rh√¥ne" par fragment
        - `q=2a` ‚Üí Trouve "Corse-du-Sud" par code
        """, tags = {"üèõÔ∏è D√©partements", "üîç Recherche"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ R√©sultats de recherche (peut √™tre vide)", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)))),
            @ApiResponse(responseCode = "400", description = "‚ùå Terme de recherche invalide", content = @Content())
    })
    List<DepartementDTO> searchDepartements(
            @Parameter(description = "Terme de recherche (nom ou code partiel)", example = "rh√¥ne", required = true, schema = @Schema(minLength = 1, maxLength = 30)) @RequestParam String q
    );

    @Operation(summary = "üìù D√©partements avec nom renseign√©", description = """
        **R√©cup√®re tous les d√©partements ayant un nom officiel renseign√©.**
        
        Filtre les d√©partements o√π le champ nom n'est pas null ou vide.
        Utile pour identifier les d√©partements correctement configur√©s.
        
        **Usage :** Contr√¥le qualit√© des donn√©es, rapports d'administration.
        """, tags = {"üèõÔ∏è D√©partements", "üìä Qualit√© des donn√©es"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements avec nom", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class))))
    })
    List<DepartementDTO> getDepartementsWithNom();

    @Operation(summary = "‚ùì D√©partements sans nom renseign√©", description = """
        **R√©cup√®re tous les d√©partements sans nom officiel.**
        
        Identifie les d√©partements o√π le champ nom est null ou vide.
        
        **Applications :**
        - Audit de qualit√© des donn√©es
        - Identification des manques √† corriger
        - Maintenance des r√©f√©rentiels
        """, tags = {"üèõÔ∏è D√©partements", "üìä Qualit√© des donn√©es"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements sans nom", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class))))
    })
    List<DepartementDTO> getDepartementsWithoutNom();

    @Operation(summary = "üèôÔ∏è D√©partements ayant des villes", description = """
        **R√©cup√®re tous les d√©partements qui ont au moins une ville associ√©e.**
        
        Filtre bas√© sur les relations avec les villes. Exclut les d√©partements "vides" ou administratifs.
        
        **Utilit√© :** Analyses territoriales, statistiques d√©mographiques.
        """, tags = {"üèõÔ∏è D√©partements", "üîó Relations"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements avec villes", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class))))
    })
    List<DepartementDTO> getDepartementsWithVilles();

    @Operation(summary = "üìä D√©partements avec nombre minimum de villes", description = """
        **R√©cup√®re les d√©partements ayant au moins N villes.**
        
        Filtre par seuil de nombre de communes. Utile pour identifier les d√©partements de tailles diff√©rentes.
        
        **Exemples d'analyse :**
        - `min=500` ‚Üí D√©partements tr√®s peupl√©s en communes
        - `min=100` ‚Üí D√©partements de taille moyenne
        - `min=10` ‚Üí Exclut les micro-d√©partements
        """, tags = {"üèõÔ∏è D√©partements", "üìä Statistiques"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements avec minimum de villes", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)))),
            @ApiResponse(responseCode = "400", description = "‚ùå Nombre minimum invalide", content = @Content())
    })
    List<DepartementDTO> getDepartementsWithMinVilles(
            @Parameter(description = "Nombre minimum de villes", example = "100", required = true, schema = @Schema(type = "integer", minimum = "1")) @RequestParam int min
    );

    @Operation(summary = "üë• D√©partements avec population minimum", description = """
        **R√©cup√®re les d√©partements ayant une population totale sup√©rieure au seuil.**
        
        Calcul bas√© sur la somme des populations de toutes les villes du d√©partement.
        
        **Applications :**
        - Identification des grands d√©partements d√©mographiques
        - Seuils pour politiques publiques
        - Analyses de r√©partition territoriale
        
        **Exemples :**
        - `min=1000000` ‚Üí D√©partements millionnaires
        - `min=500000` ‚Üí D√©partements de forte densit√©
        """, tags = {"üèõÔ∏è D√©partements", "üë• D√©mographie"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements avec population minimum", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)))),
            @ApiResponse(responseCode = "400", description = "‚ùå Seuil de population invalide", content = @Content())
    })
    List<DepartementDTO> getDepartementsWithMinPopulation(
            @Parameter(description = "Population totale minimum", example = "500000", required = true, schema = @Schema(type = "integer", format = "int64", minimum = "1")) @RequestParam Long min
    );

    // ==================== CLASSIFICATION G√âOGRAPHIQUE ====================

    @Operation(summary = "üá´üá∑ D√©partements m√©tropolitains", description = """
        **R√©cup√®re tous les d√©partements de France m√©tropolitaine.**
        
        **Crit√®res :** Codes 01 √† 95, plus 2A et 2B (Corse), √† l'exclusion des d√©partements d'outre-mer.
        
        **Usage :** Analyses territoires continentaux, statistiques m√©tropole vs outre-mer.
        """, tags = {"üèõÔ∏è D√©partements", "üó∫Ô∏è G√©ographie"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements m√©tropolitains", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)),
                    examples = @ExampleObject(name = "Exemple m√©tropolitains", value = """
                [
                  {"code": "01", "nom": "Ain"},
                  {"code": "75", "nom": "Paris"},
                  {"code": "2A", "nom": "Corse-du-Sud"}
                ]
                """)))
    })
    List<DepartementDTO> getDepartementsMetropolitains();

    @Operation(summary = "üå¥ D√©partements d'outre-mer", description = """
        **R√©cup√®re tous les d√©partements et r√©gions d'outre-mer (DROM).**
        
        **Codes concern√©s :**
        - 971 : Guadeloupe
        - 972 : Martinique  
        - 973 : Guyane
        - 974 : La R√©union
        - 975 : Saint-Pierre-et-Miquelon
        - 976 : Mayotte
        
        **Applications :** Politiques sp√©cifiques outre-mer, statistiques insulaires.
        """, tags = {"üèõÔ∏è D√©partements", "üå¥ Outre-mer"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements d'outre-mer", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)),
                    examples = @ExampleObject(name = "Exemple outre-mer", value = """
                [
                  {"code": "971", "nom": "Guadeloupe"},
                  {"code": "972", "nom": "Martinique"},
                  {"code": "974", "nom": "La R√©union"}
                ]
                """)))
    })
    List<DepartementDTO> getDepartementsOutreMer();

    @Operation(summary = "üèîÔ∏è D√©partements corses", description = """
        **R√©cup√®re les deux d√©partements de Corse.**
        
        **D√©partements :**
        - 2A : Corse-du-Sud (Ajaccio)
        - 2B : Haute-Corse (Bastia)
        
        **Particularit√© :** Codes alphanum√©riques uniques en m√©tropole.
        """, tags = {"üèõÔ∏è D√©partements", "üèîÔ∏è Corse"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements corses", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)),
                    examples = @ExampleObject(name = "D√©partements Corse", value = """
                [
                  {"code": "2A", "nom": "Corse-du-Sud"},
                  {"code": "2B", "nom": "Haute-Corse"}
                ]
                """)))
    })
    List<DepartementDTO> getDepartementsCorse();

    @Operation(summary = "üîç D√©partements par pr√©fixe de code", description = """
        **R√©cup√®re les d√©partements dont le code commence par un pr√©fixe donn√©.**
        
        **Exemples d'usage :**
        - `prefix=97` ‚Üí Tous les d√©partements d'outre-mer
        - `prefix=0` ‚Üí D√©partements 01 √† 09
        - `prefix=2` ‚Üí D√©partements 20-29 + 2A, 2B
        - `prefix=1` ‚Üí D√©partements 10-19
        
        **Applications :** Regroupements r√©gionaux, analyses par zones.
        """, tags = {"üèõÔ∏è D√©partements", "üîç Recherche"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ D√©partements avec pr√©fixe", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DepartementDTO.class)))),
            @ApiResponse(responseCode = "400", description = "‚ùå Pr√©fixe invalide", content = @Content())
    })
    List<DepartementDTO> findByCodeStartingWith(
            @Parameter(description = "Pr√©fixe du code d√©partement", example = "97", required = true, schema = @Schema(type = "string", minLength = 1, maxLength = 3, pattern = "^[0-9]{1,2}[AB]?$")) @RequestParam String prefix
    );

    // ==================== RELATIONS AVEC LES VILLES ====================

    @Operation(summary = "üèôÔ∏è Toutes les villes d'un d√©partement (par ID)", description = """
        **R√©cup√®re toutes les villes associ√©es √† un d√©partement par son identifiant.**
        
        **Format de r√©ponse :** Liste compl√®te des villes avec leurs d√©tails.
        **Tri :** Par nom de ville (ordre alphab√©tique).
        
        ‚ÑπÔ∏è **Recommandation :** Utiliser plut√¥t la recherche par code d√©partement.
        """, tags = {"üèõÔ∏è D√©partements", "üèôÔ∏è Villes"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Villes du d√©partement", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    List<VilleDTO> getVillesByDepartement(
            @Parameter(description = "Identifiant du d√©partement", example = "34", required = true) @PathVariable Long id
    );

    @Operation(summary = "üèôÔ∏è Toutes les villes d'un d√©partement (par code)", description = """
        **R√©cup√®re toutes les villes d'un d√©partement par son code officiel.**
        
        **M√©thode recommand√©e** pour r√©cup√©rer les villes d'un d√©partement.
        Plus stable et intuitive que la recherche par ID.
        
        **Applications :**
        - Export de donn√©es d√©partementales
        - Analyses territoriales locales
        - Listes de r√©f√©rence par d√©partement
        """, tags = {"üèõÔ∏è D√©partements", "üèôÔ∏è Villes"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Villes du d√©partement", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)))),
            @ApiResponse(responseCode = "404", description = "‚ùå Code d√©partement non trouv√©", content = @Content())
    })
    List<VilleDTO> getVillesByDepartementCode(
            @Parameter(description = "Code officiel du d√©partement", example = "34", required = true, schema = @Schema(pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String code
    );

    @Operation(summary = "üèÜ Top N des villes d'un d√©partement", description = """
        **R√©cup√®re les N villes les plus peupl√©es d'un d√©partement.**
        
        **Classement :** Par population d√©croissante.
        **Usage typique :** Identification des centres urbains principaux.
        
        **Applications :**
        - Hi√©rarchie urbaine d√©partementale
        - P√¥les d'attractivit√©
        - Planification territoriale
        """, tags = {"üèõÔ∏è D√©partements", "üèÜ Top"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Top des villes du d√©partement", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    List<VilleDTO> getTopVillesByDepartement(
            @Parameter(description = "Code du d√©partement", example = "34", required = true) @PathVariable String code,
            @Parameter(description = "Nombre de villes √† retourner", example = "10", schema = @Schema(type = "integer", minimum = "1", maximum = "100", defaultValue = "10")) @RequestParam(defaultValue = "10") int n
    );

    @Operation(summary = "üë• Villes avec population minimum d'un d√©partement", description = """
        **R√©cup√®re les villes d'un d√©partement ayant une population sup√©rieure au seuil.**
        
        **Param√®tres :**
        - Si `min` fourni : villes avec population ‚â• min
        - Si `min` non fourni : toutes les villes du d√©partement
        
        **Tri :** Par population d√©croissante.
        """, tags = {"üèõÔ∏è D√©partements", "üë• Population"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Villes avec population minimum", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    List<VilleDTO> getVillesByDepartementAndPopulation(
            @Parameter(description = "Code du d√©partement", example = "34", required = true) @PathVariable String code,
            @Parameter(description = "Population minimum (optionnel)", example = "10000", required = false, schema = @Schema(type = "integer", minimum = "0")) @RequestParam(required = false) Integer min
    );

    @Operation(summary = "üìä Villes dans une plage de population d'un d√©partement", description = """
        **R√©cup√®re les villes d'un d√©partement avec population dans une plage donn√©e.**
        
        **Crit√®res :** min ‚â§ population ‚â§ max
        **Tri :** Par population d√©croissante.
        
        **Exemples d'usage :**
        - Villes moyennes : 10000-50000 hab
        - Petites villes : 1000-10000 hab
        - Centres urbains : 50000-200000 hab
        """, tags = {"üèõÔ∏è D√©partements", "üìä Population"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Villes dans la plage de population", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VilleDTO.class)))),
            @ApiResponse(responseCode = "400", description = "‚ùå Plage de population invalide", content = @Content()),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    List<VilleDTO> getVillesByDepartementAndPopulationRange(
            @Parameter(description = "Code du d√©partement", example = "13", required = true) @PathVariable String code,
            @Parameter(description = "Population minimum (inclusive)", example = "10000", required = true, schema = @Schema(type = "integer", minimum = "0")) @RequestParam Integer min,
            @Parameter(description = "Population maximum (inclusive)", example = "100000", required = true, schema = @Schema(type = "integer", minimum = "0")) @RequestParam Integer max
    );

    // ==================== STATISTIQUES ====================

    @Operation(summary = "üìä Nombre total de d√©partements", description = """
        **Retourne le nombre total de d√©partements enregistr√©s.**
        
        **Usage :** Statistiques g√©n√©rales, v√©rification de compl√©tude des donn√©es.
        
        **Note :** La France compte officiellement 101 d√©partements (96 m√©tropolitains + 5 d'outre-mer).
        """, tags = {"üèõÔ∏è D√©partements", "üìä Statistiques"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Nombre de d√©partements", content = @Content(mediaType = "application/json", schema = @Schema(type = "integer", format = "int64", example = "101")))
    })
    long getTotalCount();

    @Operation(summary = "üìà Statistiques d√©taill√©es d'un d√©partement par code", description = """
        **R√©cup√®re un tableau de bord statistique complet d'un d√©partement.**
        
        **Indicateurs fournis :**
        - Code et nom officiel
        - Nombre total de villes/communes
        - Population totale (somme des villes)
        - Donn√©es de contexte administratif
        
        **Applications :**
        - Tableaux de bord territoriaux
        - Rapports d√©mographiques
        - Analyses comparatives inter-d√©partements
        """, tags = {"üèõÔ∏è D√©partements", "üìà Statistiques avanc√©es"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Statistiques du d√©partement", content = @Content(mediaType = "application/json",
                    examples = @ExampleObject(name = "Stats H√©rault", value = """
                {
                  "code": "34",
                  "nom": "H√©rault",
                  "nombreVilles": 342,
                  "populationTotale": 1192605
                }
                """))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    Map<String, Object> getStatsByCode(
            @Parameter(description = "Code du d√©partement", example = "34", required = true, schema = @Schema(pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String code
    );

    @Operation(summary = "üë• Population totale d'un d√©partement", description = """
        **Calcule et retourne la population totale d'un d√©partement.**
        
        **Calcul :** Somme des populations de toutes les villes du d√©partement.
        
        **Applications :**
        - Comparaisons d√©mographiques
        - Indicateurs de d√©veloppement territorial
        - Bases de calculs statistiques
        """, tags = {"üèõÔ∏è D√©partements", "üë• D√©mographie"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Population totale calcul√©e", content = @Content(mediaType = "application/json", schema = @Schema(type = "integer", format = "int64", example = "1192605"))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    Long getPopulationTotalByCode(
            @Parameter(description = "Code du d√©partement", example = "34", required = true) @PathVariable String code
    );

    @Operation(summary = "üèòÔ∏è Nombre de villes d'un d√©partement", description = """
        **Compte le nombre de villes/communes d'un d√©partement.**
        
        **R√©sultat :** Nombre entier de communes associ√©es au d√©partement.
        
        **Applications :**
        - Analyses de maillage territorial
        - Comparaisons de densit√© administrative
        - Statistiques de gouvernance locale
        """, tags = {"üèõÔ∏è D√©partements", "üèòÔ∏è Territoires"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Nombre de villes compt√©", content = @Content(mediaType = "application/json", schema = @Schema(type = "integer", format = "int64", example = "342"))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    Long getNombreVillesByCode(
            @Parameter(description = "Code du d√©partement", example = "34", required = true) @PathVariable String code
    );

    // ==================== GESTION AVANC√âE ====================

    @Operation(summary = "‚ö° Cr√©ation rapide d'un d√©partement", description = """
        **Cr√©e rapidement un d√©partement avec les param√®tres essentiels.**
        
        Alternative √† la cr√©ation compl√®te par JSON, utilise des param√®tres URL simples.
        
        **Param√®tres :**
        - Code : obligatoire, unique
        - Nom : optionnel, peut √™tre ajout√© ult√©rieurement
        
        **Validation :** V√©rification de l'unicit√© du code.
        """, tags = {"üèõÔ∏è D√©partements", "‚ö° Cr√©ation rapide"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "‚úÖ D√©partement cr√©√© rapidement", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class))),
            @ApiResponse(responseCode = "400", description = "‚ùå Code invalide", content = @Content()),
            @ApiResponse(responseCode = "422", description = "‚ùå Code d√©j√† existant", content = @Content())
    })
    DepartementDTO createDepartementRapide(
            @Parameter(description = "Code du d√©partement", example = "99", required = true, schema = @Schema(type = "string", pattern = "^([0-9]{1,3}|2[AB])$", minLength = 1, maxLength = 3)) @RequestParam String code,
            @Parameter(description = "Nom du d√©partement (optionnel)", example = "Nouveau-D√©partement", required = false, schema = @Schema(minLength = 2, maxLength = 50)) @RequestParam(required = false) String nom
    );

    @Operation(summary = "‚úèÔ∏è Mettre √† jour le nom d'un d√©partement", description = """
        **Met √† jour uniquement le nom d'un d√©partement existant.**
        
        Op√©ration optimis√©e pour corriger ou compl√©ter les noms de d√©partements.
        Plus s√ªre qu'une mise √† jour compl√®te.
        
        **Applications :**
        - Corrections orthographiques
        - Ajout de noms manquants
        - Standardisation des appellations
        """, tags = {"üèõÔ∏è D√©partements", "‚úèÔ∏è Mise √† jour"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Nom mis √† jour", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DepartementDTO.class))),
            @ApiResponse(responseCode = "400", description = "‚ùå Nom invalide", content = @Content()),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content())
    })
    DepartementDTO updateNomDepartement(
            @Parameter(description = "Code du d√©partement", example = "34", required = true) @PathVariable String code,
            @Parameter(description = "Nouveau nom du d√©partement", example = "H√©rault", required = true, schema = @Schema(minLength = 2, maxLength = 50)) @RequestParam String nom
    );

    @Operation(summary = "üîß Mettre √† jour tous les noms manquants", description = """
        **Op√©ration de maintenance pour compl√©ter automatiquement les noms manquants.**
        
        ‚ö†Ô∏è **Op√©ration d'administration syst√®me :** 
        Cette fonction applique une logique m√©tier pr√©d√©finie pour 
        compl√©ter les noms de d√©partements bas√©s sur leurs codes.
        
        **Process :**
        1. Identifie les d√©partements sans nom
        2. Applique la correspondance code ‚Üí nom officiel
        3. Met √† jour en lot
        
        **Usage :** Maintenance p√©riodique, import de donn√©es.
        """, tags = {"üèõÔ∏è D√©partements", "üîß Maintenance"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Noms mis √† jour", content = @Content(mediaType = "text/plain",
                    examples = @ExampleObject(name = "Message de succ√®s", value = "15 noms de d√©partements mis √† jour avec succ√®s"))),
            @ApiResponse(responseCode = "500", description = "‚ùå Erreur lors de la mise √† jour", content = @Content())
    })
    String updateNomsManquants();

    @Operation(summary = "üîç V√©rifier l'existence d'un d√©partement par code", description = """
        **V√©rifie si un d√©partement existe dans le syst√®me par son code.**
        
        **R√©ponse :** Bool√©en simple (true/false).
        
        **Applications :**
        - Validation avant cr√©ation de villes
        - V√©rification d'int√©grit√© r√©f√©rentielle
        - Contr√¥les dans les formulaires
        - Tests de pr√©sence avant op√©rations
        
        **Avantage :** Plus l√©ger qu'une r√©cup√©ration compl√®te des donn√©es.
        """, tags = {"üèõÔ∏è D√©partements", "üîç Validation"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ R√©sultat de v√©rification", content = @Content(mediaType = "application/json",
                    schema = @Schema(type = "boolean", description = "true si le d√©partement existe, false sinon"),
                    examples = @ExampleObject(name = "D√©partement existant", value = "true")))
    })
    boolean existsByCode(
            @Parameter(description = "Code du d√©partement √† v√©rifier", example = "34", required = true, schema = @Schema(type = "string", pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String code
    );

    // ==================== EXPORT PDF ====================

    @Operation(summary = "üìÑ Export PDF d'un d√©partement", description = """
        **Exporte les d√©tails complets d'un d√©partement au format PDF.**
        
        **Contenu du PDF :**
        - Informations du d√©partement (code, nom)
        - Liste de toutes les villes avec population
        - Statistiques d√©partementales
        - Mise en forme professionnelle avec tableaux
        
        **Format :** Fichier PDF t√©l√©chargeable avec nom horodat√©.
        **Utilisation :** Rapports officiels, documentation, archivage.
        
        ‚ö†Ô∏è **Attention :** Peut √™tre volumineux pour les grands d√©partements.
        """, tags = {"üèõÔ∏è D√©partements", "üìÑ Export"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ PDF g√©n√©r√© avec succ√®s",
                    content = @Content(mediaType = "application/pdf",
                            schema = @Schema(type = "string", format = "binary", description = "Fichier PDF du d√©partement")),
                    headers = @Header(name = "Content-Disposition", description = "Nom du fichier PDF", schema = @Schema(type = "string", example = "attachment; filename=departement_34_20250828_143022.pdf"))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content()),
            @ApiResponse(responseCode = "500", description = "‚ùå Erreur lors de la g√©n√©ration du PDF", content = @Content())
    })
    ResponseEntity<byte[]> exportDepartementToPdf(
            @Parameter(description = "Code du d√©partement √† exporter", example = "34", required = true, schema = @Schema(pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String codeDepartement
    );

    @Operation(summary = "üëÅÔ∏è Pr√©visualisation PDF d'un d√©partement", description = """
        **Pr√©visualise le PDF d'un d√©partement directement dans le navigateur.**
        
        **Diff√©rence avec l'export :**
        - Pas de t√©l√©chargement automatique
        - Affichage inline dans le navigateur
        - M√™me contenu que l'export PDF
        
        **Utilisation :** V√©rification avant t√©l√©chargement, pr√©visualisation rapide.
        """, tags = {"üèõÔ∏è D√©partements", "üìÑ Export"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "‚úÖ Pr√©visualisation PDF g√©n√©r√©e",
                    content = @Content(mediaType = "application/pdf",
                            schema = @Schema(type = "string", format = "binary", description = "Fichier PDF √† pr√©visualiser"))),
            @ApiResponse(responseCode = "404", description = "‚ùå D√©partement non trouv√©", content = @Content()),
            @ApiResponse(responseCode = "500", description = "‚ùå Erreur lors de la g√©n√©ration du PDF", content = @Content())
    })
    ResponseEntity<byte[]> previewDepartementPdf(
            @Parameter(description = "Code du d√©partement √† pr√©visualiser", example = "34", required = true, schema = @Schema(pattern = "^([0-9]{1,3}|2[AB])$")) @PathVariable String codeDepartement
    );
}